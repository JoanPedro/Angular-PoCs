Gerar novos módulos:

- ng g m Module_Name --routing ( --routing: Permite que o módulo seja roteado.)
( Routed Modules ).

  - A partir do momento que o Angular cria o Routed Modules, ele cria dentro do
  módulo solicitado o Routing Module (Module_Name-routing.module.ts)

Tipos de módulos:

-> Domain: Agrupa todos os componentes necessários para implementar uma única feature;
-> Routed: Semelhante ao módulo 'Domain', mas esses componentes estão vinculados
às rotas (exibidas apenas quando o usuário está em um endereço específico);
-> Routing: Define regras de rotas (Ex: mostre o componente Todo List quando
um usuário estiver em uma rota de '/ todos');
-> Services: Define Services que serão utilizados in diversas partes da aplicação;
-> Widget: Define alguns componentes reutilizáveis que serão utilizados em multiplos
outros componentes.

Estratégia:
- Cada Módulo deve possuir seus componentes, e o componente Pai (app Module) deve
renderizar todos eles.
- Componentes dentro de módulos específicos só podem ser acessados pelos próprios
módulos. Para ser acessado por outros módulos e externamente, é necessários exportar
os componentes a partir do seu módulo (Simplesmente exportar e importar dentro do App Module ou
qualquer outro 'Módulo'. Ou, ao invés de exportar, definir um component roteado, e a partir do
'componentNome-Routing-Module' definir dentro de suas Rotas o Path ('/nomeDaRota') que será atribuido e
qual componente será definido para ele).

Propriedades:

-> Declartions: Lista de componentes, pipes, diretivas que são criadas neste módulo.
-> Imports: Lista de outros módulos que este 'módulo' depende uma vez.
-> Exports: Lista de componentes, pipes, diretivas que este 'módulo' torna "público/disponível"
para fora, ou seja, para serem utilizados em outros módulos.
-> Providers: Caminho ANTIGO para conecção de módulos e serviços.
-> Bootstrap: Usado pelo AppModule somente para declarar qual componente irá mostrar primeiro.

Routing:

-> Para rotear um componente e ser acessível somente em uma específica rota, é necessário
realizar o roteamento dele dentro do seu componente de rotas, definindo: path e componente que será renderizado.
Ex. path: 'element', component: ElementComponent. Desta forma, o component ElementComponent será
renderizado a partir da rota /element.

________________________________________________________________________________

Overview:

- Módulo Pai: AppModule
  Componente do Módulo Pai: AppComponent

- Módulos Filhos: ElementsModule e CollectionsModule
  Componentes dos Módulos Filhos: ElementsHomeComponent e CollectionsHomeComponent
    - Roteamento (Elements/Collections Routing Module)
      path: 'elements', component: 'ElementsComponent'
      path: 'collections', component: 'CollectionsComponent'

Ou seja:

1. ElementsModule (Possui um ElementHomeComponent e um ElementsRouting)
2. ElementsRouting Module define o path (página que será disponibilizado '/elements' e
também qual component será renderizado: ElementComponent.)
3. No AppComponent (Component PAI) define um '<route-outlet></route-outlet>' que será o responsável
por exibir os componentes definidos nos respectivos Routing Module.
4. No AppModule.ts Importa o devido Módulo e define ele no @ngModule.

--

routerLink -> Ao invés de href para navegar entre componentes roteados.
routerLinkActive -> Para fazer a marcação de qual componente roteado está ativo.

  -> Sobre Roteamento não Lógico:
    - Quando é necessário gerar componentes que não tem sentido ser roteado pela
    lógica de rotas, gera-se componentes sem o sufixo --routing. Desta forma, o Angular
    não vai adicionar automaticamente esses componentes dentro do sistema de rotas. Logo,
    desta forma recomenda-se associar essas rotas dentro do 'app-routing.module.ts'
    -> Então dentro do app-routing.module:
      - Para Home: { path: '', component: HomeComponent }
      - Para NotFound: { path: '**', component: NotFoundComponent }
    -> OBS: Para o funcionamento correto dos componentes com lógica e sem lógia de roteamento,
    é necessário que, dentro do app.module.ts:
      Dentro dos imports, o AppRoutingModule seja o ultima a ser importado. Visto que,
      ele receberá rotas sem lógica. Caso fosse o primeiro, rotas como o NotFound ofuscaria
      todas as outras, sendo sempre renderizado.

________________________________________________________________________________

    -> Roteamento Avançado!

Lazy loading:

- Entrega de renderização de componentes mais leve. O Servidor só enviará dados do componente
necessário e desejado pelo cliente. Muito útil em aplicação mobile, visto que tem condições de
rede reduzidas.
- O problema ocorre uma vez que dentro do App.module.ts, no array 'import' ele chega a importar
todos os componentes que são necessariamente roteados. Desta forma, uma vez que chamado o AppModule
que é necessariamente o módulo pai, ele carregará todos os importe consigo. Logo, é necessário, para
o Lazy loading, retirar os modulos importados dentro do array 'import' (Não considerando os que não
preocisão de lógica de roteamento/path. Que são os casos do PageNotFound e Home!) e realizar uma lógica dentro
de Roteamento que segue:

  -> Escolha quais módulos devem ser tratos com Lazy loader;
  -> Para cada um desses módulos, remova qualquer declaração de importação desses Módulos (Como dentro
  do array de 'import' dentro do AppRoutingModule) de qualquer lugar que esteja no projeto, somente existindo em seus próprio Módulo/Componente;
  -> Em AppRoutingModule, defina a rota em 'routes' array para especificar quando exatamente
    carregar aquele módulo em específico.
  -> Já no seu Módulo de Rotas Lazy Loaded (Módulo de rota do exato componente que está sendo lazy loaded),
    edite o 'path' para cada rota que será relativa ao 'path' que foi especificado em AppRoutingModule.
      -> Essa etapa só é possível em 90% dos casos somente se o Módulo tiver um componente home: 'xxxHomeComponent'.

  No AppRoutingModule:
  {
    path: 'elements', // Nome do caminho que será disponibilizado... (localhost:4200/elements)
    loadChildren: () => import('./elements/elements.module') // Função de Lazy Loading. Que
      .then(module => module.ElementsModule) // importará exatamente o componente Elements quando
      // acessado a rota '/elements'.
  },

  No Módulo de Rotas Lazy loaded, no exemplo ElementsComponent:
  { path: '', component: ElementsHomeComponent}.

    OBS -> Uma vez que no AppRoutingModule esteja definido o path 'elements', não é recomendado,
      que dentro do Módulo de Rotas do componente que está sendo Lazy Loaded, esteja também um
      path, uma vez que as chamadas são cumulativas. Ficando: localhost:4200/elements/elements. Logo,
      faça com que o Módulo de Rotas do Componente que está sendo Lazy Loaded seja definido o path
      somente como: ''. Vazio!
    OBS2. É necessário que dentro do módulo gerado (ex. Views) seja criado um ViewsHome (ng g c views/ViewsHome),
      para que seja manipulado os arquivos estáticos.

________________________________________________________________________________

 -> Ao invés de utilizar property binds com elementos simples, é possível utilizar
    a diretiva <ng-content /> que irá carregar exatamente o conteúdo especificado
    dentro do módulo compartilhado. Uma alternativa ao @Input e Bindings.

  -> a diretiva <ng-content /> Utilizada como slot para components, possui uma Propriedade
    chamada select. O select selecionada especifico componente a ser renderizado. Por exemplo,
    existe um component Segment, e esse component precisa receber alguns dados do componente pai,
    ElementHome. Dentro do ElementHome existirá um <app-segment> que definirá quais informações
    serão passadas para o component segment. Desta forma, se dentro do <app-segment> existir alguma
    div, component HTML ou que seja definido for ID, o segmentComponent consegue renderizar facilmente
    com a propriedade select do ng-content. Suponha que o ElementHome esteja passando para o segmentComponent
    uma DIV de ID button-content, dentro do segmentComponent existirá um <ng-content> da forma:
    <ng-content select="#button-content"> de forma a renderizar, no slot a div button-content. Uma vez que
    a diretiva <ng-content> sem select é um slot default!


________________________________________________________________________________

  -> Componentes de tabela reutilizaveis: Passa-se 2 arrays - Data e Header.
    O Data - Possui todas as informações de dados.
    O Header - Possui as keys que serão definidas nas colunas da tabela.
      - Utilizar a diretiva *ngFor="let header of headers" {{ header.label }}


OBS. Quando utilizando Componente Pai e Componente filho, os dados devem sempre serem
definidos/aquisitados pelo pai e serem passados para os filhos. O único papel do filho é
servir como template.


________________________________________________________________________________

-> Resumo: Roteamento avançado.

Considerando que existe o AppModule e um Módulo Elements criado pelo (ng g m Elements):

1. Adicionar o link ao 'header' de navegação no AppComponent.html. (Utilizar o
routerLink para definir a rota, routerLinkActive para ativar o link). Este link
deve navegar para a rota de 'elements';
2. Em AppRouting Module.ts, adicionar a regra de Lazy Loading já cida a cima;
3. Gerar um Componente ElemenetsHomeComponent;
4. Opcional: O ElementsHome é a visão principal do Módulo, todos components que forem
gerados a partir deste módulos, devem ser referenciados nesse Html;
5. Adicionar a regra de roteamento no ElementsRouting Module para mostrar o ElementsHomeComponent;
6. Mostrar quaisquer outros componentes dentro do Elements html.
7. Pode-se criar componentes (Widget) para a aplicação geral. Mas, para serem utilizados,
devem ser IMPORTADOS em todos os módulos que forem precisos, a partir do nameModule.module.ts,
array de imports.

________________________________________________________________________________

Comunicação de Filho para Pai:

  - Utiliza-se no FILHO os atributos EventEmmiter e Output do angular.
    Ex. @Output() close = new EventEmitter;
    Ou seja, o filho estará exportando como saída (Output) o evento de close definido,
    que está sendo utilizado em diversos elementos do DOM.
  -> Estratégia bastante utilizada para um Modal:
    1. Define o Componente Home e Component Modal;
    2. Importar o componente modal para dentro do Home e permite sua visualização;
    3. Dentro do modal, define algumas especificas ações de fechamento; como por exemplo:
      clicar fora do modal, clicar no ok do modal e clicar no x do modal.
    4. Definidas as ações (São elementos do DOM) deve-se definir uma função capturando
    o evento de click;
    5. Dentro do modal.ts, define-se Output e EventEmitter de forma que, considerando
    o evento (close) como saída, deverá ser chamado pelo componente pai (Home) e definido
    a ação de fechamento. <app-modal (close)="closeOnClick()" ></app-modal>. De forma que,
    a função closeOnClick está definida no elemento PAI (HOME), e está passando para a saída
    definida no componente filho. Desta forma, todos os elementos da DOM definidos no filho
    que são tratados com o Output CLOSE, receberão a função de closeOnClick, que são: o botão
    de X, o botão de OK e clicar fora do Modal.
      OBS.5: Deve-se ficar atento para a propagação do evento de Click, que tornará todo modal
      fechado em qualquer que seja o lugar clicado. Previne-se com o (click)="$event.stopPropagation" no
      penúltimo div do elemento modal.
